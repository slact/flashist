<!DOCTYPE html>
<html lang='en'>
  <head>
    <title>Light Control Panel</title>
    <meta charset='utf-8'>
    <script type='text/javascript' src='moo.js'></script>
    <script type='text/javascript' src='jscolor.min.js'></script>
    <style type="text/css">
      form {
        /*max-width: 700px;*/
        border: 1px solid #ccc;
        position: relative;
        top: 0;
        margin: 0.5em;
        margin-bottom: 1em;
        padding: 0.5em;
        border-radius: 2em;
      }
      form.selected {
        border: 1px solid #68895a;
        background: #cbffb4;
      }
      form label, form .label {
        margin-bottom: 0.5em;
        display: block;
        border-radius: 2em;
        background: #f0f4f0;
        border: 4px solid #cdc;
        padding: 0.5em;
        clear: both;
        overflow: auto;
      }
      
      form.selected label, form.selected .label {
        background: #d7f0d7;
        border: 4px solid #9bad9b;
      }
      
      input[type=range] {
        display: block;
        width:90%;
        margin: auto;
        margin-bottom: 0.5em;
      }
      input[type=range].half {
        display: block;
        float: left;
        width: 45%;
      }
      
      div.rangeInfo {
        display: block;
        margin-right: 1em;
        text-align: right;
        color: #CA3;
        clear: both;
        overflow: auto;
      }
      label span.info, .label span.info {
        display: block;
        margin-top: 0.7em;
        margin-bottom: 0.7em;
      }
      .info {
        font-size: 70%;
      }

      input[type=range]::-webkit-slider-thumb {
        height: 36px;
        width: 36px;
        cursor: pointer;
        /*-webkit-appearance: none;*/
        margin-top: -14px;
      }

      input[type=range]::-moz-range-thumb {
        height: 60px;
        width: 60px;
        cursor: pointer;
      }

      input[type=range]::-ms-thumb {
        height: 60px;
        width: 60px;
        cursor: pointer;
      }
      
      .error {
        position: fixed;
        width:100%;
        height:100%;
        top:0;
        left: 0;
        background: rgba(200, 30, 30, 0.5);
      }
      
      .error .message {
        display: block;
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        border: 3px solid #411;
        border-radius: 1em;
        background: #fdd;
        font-size: 200%;
        padding: 1em;
        color: #411;
      }
      
      .hidden {
        display: none !important;
      }

      
    </style>
    <meta content="width=device-width, initial-scale=1" name="viewport" />
  </head>
  <body>
  
    <form id="active" method='post' action='/active'>
      <h2>Active Settings</h2>
      <p class="info">When the music's playing</p>
      <label>
        Peak Smoothing
        <span class="info">
          The less smoothing, the more varied the brightness
        </span>
        <input name='peaks_measure_count' list='smoothings' type='range' min='1' max='15' value='<%=active[:peaks_measure_count]%>' />
        <datalist id='smoothings'>
          <option value='1' label='spiky'></option>
          <option value='4' label='not too spiky'></option>
          <option value='10' label='smooth and low'></option>
        </datalist>
      </label>
      <label>
        Amplification
        <span class="info">
          Boost the brightness
        </span>
        <input name='amplification' list='amplifications' type='range' min='1' max='14' value='<%=active[:amplification]%>' />
        <datalist id='amplifications'>
          <option value='1' label='None'></option>
          <option value='2' label='Just a bit'></option>
          <option value='5' label='Might be too bright'></option>
          <option value='11' label='This one goes to 11'></option>
          <option value='12' label='Way past overdrive'></option>
        </datalist>
      </label>
      
      <label>
        Color responsiveness
        <span class="info">
          How much the color depends on dominant pitch
        </span>
        <input name='colorscale' type='range' list="colorscales" min='1' max='3' value='<%=active[:colorscale]%>' step='0.1' />
        <datalist id='colorscales'>
          <option value='1' label='normal' >
          <option value='1.2' label='increased' >
          <option value='1.5' label='interesting' >
          <option value='2' label='colorful' >
          <option value='2.5' label='wacky' >
          <option value='3' label='rainbow clown' >
        </datalist>
      </label>
      
      <label>
        Color drift
        <span class="info">
          How fast colors cycle around regardless of pitch
        </span>
        <input name='colordrift' list='colordrifts' type='range' min='0' max='0.03' value='<%=active[:colordrift]%>' step='0.00001' />
        <datalist id='colordrifts'>
          <option value='0' label='none'></option>
          <option value='0.001' label='slow'></option>
          <option value='0.01' label='fast'></option>
          <option value='0.03' label='double rainbow'></option>
        </datalist>
      </label>
      
      <label>
        Color Temperature
        <span class="info">
          for setting the mood right
        </span>
        <input name='redblue_shift' list='temps' type='range' min='-1' max='1' value='<%=active[:redblue_shift]%>' step='0.01' />
        <datalist id='temps'>
          <option value='-1' label='the bluest'></option>
          <option value='-0.5' label='kind of blue'></option>
          <option value='-0.1' label='a hint of blue'></option>
          <option value='0' label='neutral'></option>
          <option value='0.1' label='a hint of red'></option>
          <option value='0.5' label='reddish'></option>
          <option value='0.9' label='martial'></option>
          <option value='1' label='red alert'></option>
        </datalist>
      </label>
    </form>
    
    <form id="idle" method="post" action="/idle">
      <h2>Idle Settings</h2>
      <p class="info">when the music's over</p>
      <label>
        Hue cycling speed
        <span class="info"></span>
        <input name="color_cycling_speed" type="range" list="color_cycling_speeds" min='0' max='0.1' step="0.0001" />
        <datalist id="color_cycling_speeds">
          <option value="0" label="none"></option>
          <option value="0.0005" label="imperceptible"></option>
          <option value="0.001" label="molasses"></option>
          <option value="0.003" label="lowrider"></option>
          <option value="0.007" label="slow jam"></option>
          <option value="0.02" label="noticeable"></option>
          <option value="0.05" label="attention-grabbing"></option>
          <option value="0.07" label="wacky"></option>
          <option value="0.1" label="rainbow trout feeding frenzy"></option>
        </datalist>
      </label>
      <label>
        Brightness cycling speed
        <span class="info"></span>
        <input name="brightness_cycling_speed" type="range" list="brightness_cycling_speeds" min='0' max='0.08' step="0.0005" />
        <datalist id="brightness_cycling_speeds">
          <option value="0" label="none"></option>
          <option value="0.0001" label="imperceptible"></option>
          <option value="0.001" label="creeping"></option>
          <option value="0.005" label="gradual"></option>
          <option value="0.01" label="noticeable"></option>
          <option value="0.06" label="kinda fast"></option>
          <option value="0.08" label="attention"></option>
        </datalist>
      </label>
      <div class="label">
        Brightness range
        <span class="info">the wider apart the sliders, the more the brightness varies</span>
        <input name="brightness_cycling_min" class="half" type="range" min="0" max="0.5" step="0.01" />
        <input name="brightness_cycling_max" class="half" type="range" min="0.5" max="1" step="0.01" />
      </div>
      <div class="label">
        Fixed color
        <span class="info">Setting this disables cycling hue and brightness</span>
        <input type="checkbox" name="static_color_enabled" value="1" />
        <input name="static_color" class="jscolor" value="click to pick color" />
      </div>
    </form>
    
    <div class="error hidden" id="error">
      <div class="message"></div>
    </div>
    
    <script type='text/javascript'>
      var sendOnChangeEnabled = true;
      
      function errorOverlay(msg) {
        var el = document.getElement('#error');
        if(msg) {
          el.getElement("div").set('text', msg);
          el.removeClass("hidden");
        }
        else {
          el.addClass("hidden");
        }
      }
      
      function applyJSONInfo(data) {
        sendOnChangeEnabled = false;
        
        (["active", "idle"]).each(function(kind) {
          var form = document.getElement('form#' + kind);
          if(data["state"] == kind) {
            form.addClass("selected");
          }
          else {
            form.removeClass("selected");
          }
          Object.each(data[kind], function(val, name) {
            console.log(val, name)
            if(name == "static_color") {
              if(!val) {
                form.getElement('input[name=static_color_enabled]').set("checked", null);
                name=false;
              }
              else {
                form.getElement('input[name=static_color_enabled]').set("checked", "checked");
              }
            }
            if(name) {
              var el = form.getElement('input[name=' + name + ']');
              if(!el) return;
              if(el.get('value') != val) {
                el.set('value', val);
              }
            }
          });
        })
        
        sendOnChangeEnabled = true;
      }
    
      function applyRangeLabels(el) {
        var lst = el.retrieve('list');
        if(!lst) return;
        var opt = lst.getChildren();
        var i;
        var curLbl = false;
        var prev = false;
        var val;
        for(i=0; i<opt.length; i++) {
          val = parseFloat(opt[i].get('value'));
          var elVal = parseFloat(el.value);
          if(elVal < val) {
            curLbl = (prev ? prev : opt[i]).get('label');
            break;
          }
          else if(elVal == val || (elVal > val && i >= opt.length)) {
            curLbl = opt[i].get('label');
            break;
          }
          prev = opt[i];
        }
        if(curLbl) {
          el.retrieve('info').set('text', curLbl);
        }
      }
      document.getElements('form').each(function(form) {
        
        form.getElements('input[type=range]').each(function(el) {
          var listEl = form.getElementById(el.get('list'));
          console.log("going through ", el);
          if(!listEl) return;
          var info = new Element('div', {'class':"rangeInfo", text:" "});
          el.grab(info, 'after');
          el.store('info', info);
          el.store('list', listEl);
          el.addEvent('input', function() {
            applyRangeLabels(el);
          });
          
        });
        
        var updateRequest = new Request.JSON({url: form.get('action'), method: "POST"})
        updateRequest.addEvent('success', applyJSONInfo);
        form.getElements('input').each(function(el) {
          el.addEvent('change', function(ev) {
            if(sendOnChangeEnabled) {
              updateRequest.send(el.getParent());
            }
          });
        });
      });
      
      document.addEvent('domready', function() {
        document.getElements('input[type=range]').each(applyRangeLabels);
        
        var pollRequest = new Request.JSON({url: "/info", method: "GET", link: "cancel"});
        pollRequest.addEvent('success', applyJSONInfo);
        pollRequest.addEvent('success', function(){errorOverlay(false);});
        pollRequest.addEvent('failure', function(xhr) {
          if(xhr.status==502) {
            errorOverlay("The system is down or maybe not connected to the internet");
          }
          else {
            errorOverlay("Error: " + xhr.status + " " + xhr.statusText);
          }
        });
        setInterval(function() {
          pollRequest.send();
        }, 5000);
        pollRequest.send();
      });
    </script>
  </body>
</html>
        
